name: Build, Test & Deploy to Azure

on:
  push:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Clean
        run: mvn clean

      - name: Maven Validate
        run: mvn validate

      - name: Maven Compile
        run: mvn compile

      - name: Maven Test
        run: mvn test

      - name: Maven Package
        run: mvn package

      - name: Maven Verify
        run: mvn verify

      # Verify JAR was created and is executable
      - name: Verify JAR file
        run: |
          echo "=== JAR Files Created ==="
          ls -la target/*.jar
          echo "=== JAR File Details ==="
          file target/*.jar
          echo "=== Test JAR execution ==="
          java -jar target/*.jar --version || echo "JAR version check failed"

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  deploy-azure:
    needs: build-test
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Needed to push updated version.txt

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: downloaded-jar

      - name: Prepare Docker context
        run: |
          mkdir -p target
          cp downloaded-jar/*.jar target/app.jar
          echo "=== JAR File Verification ==="
          ls -la target/
          file target/app.jar

      - name: Read and bump version
        id: version
        run: |
          VERSION_FILE=version.txt
          OLD_VERSION=$(cat $VERSION_FILE | tr -d 'v')
          NEW_VERSION=$((OLD_VERSION + 1))
          echo "v$NEW_VERSION" > $VERSION_FILE
          echo "VERSION=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit new version
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version.txt
          git commit -m "Bump version to ${{ steps.version.outputs.VERSION }}"
          git push origin main

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Register Azure providers
        run: |
          az provider register --namespace Microsoft.ContainerInstance
          az provider register --namespace Microsoft.ContainerRegistry

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push to ACR
        run: |
          ACR_LOGIN_SERVER="${{ secrets.ACR_NAME }}.azurecr.io"
          IMAGE_NAME="arebbus-backend"
          
          # Build the Docker image
          docker build -t $ACR_LOGIN_SERVER/$IMAGE_NAME:latest .
          docker build -t $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ steps.version.outputs.VERSION }} .
          
          # Push to ACR
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:latest
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ steps.version.outputs.VERSION }}

      - name: Deploy to Azure Container Instance
        run: |
          ACR_LOGIN_SERVER="${{ secrets.ACR_NAME }}.azurecr.io"
          IMAGE_NAME="arebbus-backend"
          
          # Delete existing container instance if it exists
          az container delete \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --yes || true
          
          # Wait for deletion to complete
          sleep 30
          
          # Create new container instance with startup probe
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --image $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ steps.version.outputs.VERSION }} \
            --registry-login-server $ACR_LOGIN_SERVER \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 2 \
            --memory 2 \
            --ports 6996 \
            --ip-address public \
            --os-type Linux \
            --restart-policy Always \
            --dns-name-label arebbus-backend-${{ github.run_number }} \
            --environment-variables \
              POSTGRES_URL="${{ secrets.POSTGRES_URL }}" \
              POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
              POSTGRES_PASS="${{ secrets.POSTGRES_PASS }}" \
              SECRET_KEY=${{ secrets.SECRET_KEY }} \
              FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
              JAVA_OPTS="-Xmx1g -Djava.security.egd=file:/dev/./urandom"

      - name: Wait and Monitor Container Status
        run: |
          echo "=== Waiting for container to start ==="
          sleep 60
          
          # Check container status multiple times
          for i in {1..10}; do
            echo "=== Status Check $i ==="
          
            CONTAINER_STATE=$(az container show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.ACI_NAME }} \
              --query containers[0].instanceView.currentState.state \
              --output tsv 2>/dev/null || echo "unknown")
          
            echo "Container State: $CONTAINER_STATE"
          
            # Get detailed container info
            az container show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.ACI_NAME }} \
              --query "{state: containers[0].instanceView.currentState.state, exitCode: containers[0].instanceView.currentState.exitCode, detailStatus: containers[0].instanceView.currentState.detailStatus}" \
              --output table || true
          
            # Try to get logs
            echo "=== Container Logs (Attempt $i) ==="
            az container logs \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.ACI_NAME }} \
              --container-name ${{ secrets.ACI_NAME }} || echo "No logs available yet"
          
            if [ "$CONTAINER_STATE" = "Running" ]; then
              echo "Container is running!"
              break
            elif [ "$CONTAINER_STATE" = "Terminated" ]; then
              echo "Container has terminated - check logs above"
              exit 1
            fi
          
            echo "Waiting 30 seconds before next check..."
            sleep 30
          done

      - name: Get Final Status and Test Connectivity
        run: |
          CONTAINER_IP=$(az container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --query ipAddress.ip \
            --output tsv)
          
          CONTAINER_STATE=$(az container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --query containers[0].instanceView.currentState.state \
            --output tsv)
          
          echo "=== Final Deployment Status ==="
          echo "Container State: $CONTAINER_STATE"
          echo "Application URL: http://$CONTAINER_IP:6996"
          echo "=========================="
          
          if [ "$CONTAINER_STATE" = "Running" ]; then
            echo "=== Testing Application ==="
            # Test if port is open
            timeout 10 bash -c "</dev/tcp/$CONTAINER_IP/6996" && echo "Port 6996 is accessible" || echo "Port 6996 is not accessible"
          
            # Try HTTP request
            curl -f "http://$CONTAINER_IP:6996/health" || echo "Health check endpoint not responding"
          fi