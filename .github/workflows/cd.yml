name: CD - Deploy to Azure

on:
  workflow_run:
    workflows: ["CI - Build and Test"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    environment:
      name: production
      url: http://arebbus-backend-latest.azurecontainer.io:6996

    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Instance
        run: |
          ACR_IMAGE="${{ secrets.ACR_NAME }}.azurecr.io/arebbus-backend:latest"
          
          # Delete existing container if exists
          az container delete \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --yes || true
          
          # Wait for cleanup
          sleep 30
          
          # Create new container instance using ACR image
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --image $ACR_IMAGE \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --cpu 2 \
            --memory 2 \
            --ports 6996 \
            --ip-address public \
            --os-type Linux \
            --restart-policy Always \
            --dns-name-label arebbus-backend-latest \
            --environment-variables \
              POSTGRES_URL="${{ secrets.POSTGRES_URL }}" \
              POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
              POSTGRES_PASS="${{ secrets.POSTGRES_PASS }}" \
              SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
              JAVA_OPTS="-Xmx1g -Djava.security.egd=file:/dev/./urandom"

      - name: Wait for deployment
        run: |
          echo "Waiting for container to start..."
          sleep 60
          
          for i in {1..10}; do
            CONTAINER_STATE=$(az container show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name ${{ secrets.ACI_NAME }} \
              --query containers[0].instanceView.currentState.state \
              --output tsv)
          
            echo "Container state: $CONTAINER_STATE"
          
            if [ "$CONTAINER_STATE" = "Running" ]; then
              echo "✅ Container is running!"
              break
            elif [ "$CONTAINER_STATE" = "Terminated" ]; then
              echo "❌ Container terminated"
              az container logs \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --name ${{ secrets.ACI_NAME }}
              exit 1
            fi
          
            sleep 30
          done

      - name: Health check
        run: |
          CONTAINER_IP=$(az container show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --query ipAddress.ip \
            --output tsv)
          
          echo "Application URL: http://$CONTAINER_IP:6996"
          echo "DNS URL: http://arebbus-backend-latest.azurecontainer.io:6996"
          
          # Wait a bit more for app to fully start
          sleep 30
          
          # Try health check (adjust endpoint as needed)
          for i in {1..5}; do
            if curl -f "http://$CONTAINER_IP:6996/health" 2>/dev/null; then
              echo "✅ Health check passed!"
              break
            elif curl -f "http://$CONTAINER_IP:6996/" 2>/dev/null; then
              echo "✅ Root endpoint responding!"
              break
            else
              echo "⏳ Attempt $i: Health check failed, retrying..."
              sleep 10
            fi
          done