name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
#  pull_request:
#    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        run: mvn clean verify

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Prepare Docker context
        run: |
          # Ensure the JAR is named consistently
          cp target/*.jar target/app.jar
          ls -la target/app.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/arebbus-backend"
          VERSION_TAG="v${{ github.run_number }}"
          
          # Build image
          docker build -t $DOCKER_IMAGE:latest -t $DOCKER_IMAGE:$VERSION_TAG .
          
          # Push to Docker Hub
          docker push $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:$VERSION_TAG
          
          echo "Images pushed to Docker Hub:"
          echo "- $DOCKER_IMAGE:latest"
          echo "- $DOCKER_IMAGE:$VERSION_TAG"