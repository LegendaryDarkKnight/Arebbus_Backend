name: CD - Deploy to Azure VM

on:
  workflow_run:
    workflows: ["CI - Build and Test"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    environment:
      name: production

    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Check for existing container
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "üîç Checking for existing arebbus container..."
          
            # Check if container exists and is running
            if docker ps -q -f name=arebbus; then
              echo "üì¶ Found running arebbus container"
              docker ps -f name=arebbus --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            else
              echo "‚ÑπÔ∏è No running arebbus container found"
            fi
          
            # Check if container exists (stopped)
            if docker ps -aq -f name=arebbus; then
              echo "üì¶ Found existing arebbus container (may be stopped)"
            else
              echo "‚ÑπÔ∏è No existing arebbus container found"
            fi
          EOF

      - name: Stop existing container
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            if docker ps -q -f name=arebbus; then
              echo "üõë Stopping running arebbus container..."
              docker stop arebbus
              echo "‚úÖ Container stopped successfully"
            else
              echo "‚ÑπÔ∏è No running container to stop"
            fi
          EOF

      - name: Remove existing container
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            if docker ps -aq -f name=arebbus; then
              echo "üóëÔ∏è Removing existing arebbus container..."
              docker rm arebbus
              echo "‚úÖ Container removed successfully"
            else
              echo "‚ÑπÔ∏è No existing container to remove"
            fi
          EOF

      - name: Pull latest image
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "‚¨áÔ∏è Pulling latest image from Docker Hub..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/arebbus-backend:latest
            echo "‚úÖ Image pulled successfully"
          EOF

      - name: Start new container
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "üöÄ Starting new arebbus container..."
            docker run -d \
              --name arebbus \
              -p 8080:6996 \
              --restart unless-stopped \
              -e POSTGRES_URL="${{ secrets.POSTGRES_URL }}" \
              -e POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
              -e POSTGRES_PASS="${{ secrets.POSTGRES_PASS }}" \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
              -e JAVA_OPTS="-Xmx1g -Djava.security.egd=file:/dev/./urandom" \
              ${{ secrets.DOCKER_USERNAME }}/arebbus-backend:latest
            echo "‚úÖ Container started successfully"
          EOF

      - name: Wait for container startup
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "‚è≥ Waiting for container to initialize..."
            sleep 30
            echo "‚úÖ Wait period completed"
          EOF

      - name: Check container status
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "üìã Checking container status..."
            docker ps -f name=arebbus --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
            if docker ps -q -f name=arebbus; then
              echo "‚úÖ Container is running"
            else
              echo "‚ùå Container is not running"
              exit 1
            fi
          EOF

      - name: Show container logs
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "üìÑ Container logs (last 20 lines):"
            docker logs --tail 20 arebbus
          EOF

      - name: Wait for application startup
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "‚è≥ Waiting for application to fully start..."
            sleep 60
            echo "‚úÖ Application startup wait completed"
          EOF

      - name: Verify container is running
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "üîç Verifying container is still running..."
            if docker ps -q -f name=arebbus; then
              echo "‚úÖ Container is running!"
              docker ps -f name=arebbus --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            else
              echo "‚ùå Container is not running!"
              echo "üìÑ Container logs:"
              docker logs arebbus
              exit 1
            fi
          EOF

      - name: Test health endpoint
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "ü©∫ Testing health endpoint..."
            for i in {1..5}; do
              echo "ü©∫ Health check attempt $i of 5..."
          
              if curl -f "http://localhost:8080/health" 2>/dev/null; then
                echo "‚úÖ Health endpoint responding!"
                exit 0
              else
                echo "‚è≥ Health endpoint not responding, waiting 10s..."
                sleep 10
              fi
            done
            echo "‚ö†Ô∏è Health endpoint not responding after 5 attempts"
          EOF

      - name: Test root endpoint
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "üåê Testing root endpoint..."
            for i in {1..3}; do
              echo "üåê Root endpoint test attempt $i of 3..."
          
              if curl -f "http://localhost:8080/" 2>/dev/null; then
                echo "‚úÖ Root endpoint responding!"
                exit 0
              else
                echo "‚è≥ Root endpoint not responding, waiting 10s..."
                sleep 10
              fi
            done
            echo "‚ùå Root endpoint not responding after 3 attempts"
            exit 1
          EOF

      - name: Show final status
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            echo "üéâ Deployment completed successfully!"
            echo "üìç Application is accessible at: http://${{ secrets.VM_HOST }}:8080"
            echo ""
            echo "üìã Final container status:"
            docker ps -f name=arebbus --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa